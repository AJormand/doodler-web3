{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/Bet.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror BetContract_LessThanMinimumBet();\n\ncontract BetContract is Ownable {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _id;\n    uint256 public minimumBet = 0.001 ether;\n    uint256 private protocolEarnings;\n    mapping(uint256 => Bet) id2Bet;\n\n    enum BetStatus {\n        Created,\n        InProgress,\n        Completed,\n        Failed\n    }\n\n    struct Bet {\n        uint256 id;\n        BetStatus status;\n        address player1;\n        uint256 scorePlayer1;\n        address player2;\n        uint256 scorePlayer2;\n        address winner;\n        uint256 betAmount;\n    }\n\n    event BetCreated(uint256 id, address indexed player1, uint256 amount);\n    event BetTaken(uint256 id, address indexed player2, uint256 amount);\n    event BetCompleted(\n        uint256 id,\n        address indexed player1,\n        address indexed player2,\n        uint256 betAmount\n    );\n    event BetFailed(uint256 id, address indexed player1, uint256 amount);\n\n    function createBet(address player1) public payable {\n        require(msg.value > minimumBet, \"Bet less than minimumBet\");\n        _id.increment();\n        Bet memory newBet = Bet(\n            _id.current(),\n            BetStatus.Created,\n            player1,\n            0,\n            address(0),\n            0,\n            address(0),\n            msg.value\n        );\n        id2Bet[_id.current()] = newBet;\n    }\n\n    function takeBet(uint256 _betId, address _player2) public payable {\n        Bet storage bet = id2Bet[_betId];\n        require(bet.status == BetStatus.Created, \"You can't take this bet\");\n        require(bet.betAmount == msg.value, \"Bet amount not matched\");\n        bet.status = BetStatus.InProgress;\n        bet.player2 = _player2;\n        id2Bet[_betId] = bet;\n    }\n\n    function updateScore(\n        uint256 _betId,\n        address _player,\n        uint256 _score\n    ) public onlyOwner {\n        Bet storage updatedBet = id2Bet[_betId];\n        require(\n            updatedBet.status == BetStatus.InProgress ||\n                updatedBet.status == BetStatus.Created,\n            \"Bet status not Created or inProgress\"\n        );\n        if (updatedBet.player1 == _player) {\n            updatedBet.scorePlayer1 = _score;\n        } else if (updatedBet.player2 == _player) {\n            updatedBet.scorePlayer2 = _score;\n        } else {\n            revert(\"Invalid player address\");\n        }\n\n        declareWinner(updatedBet);\n    }\n\n    function declareWinner(Bet memory bet) private {\n        if (bet.scorePlayer1 > 0 && bet.scorePlayer2 > 0) {\n            // Determine the winner based on scores\n            address winner = bet.scorePlayer1 > bet.scorePlayer2\n                ? bet.player1\n                : bet.player2;\n            id2Bet[bet.id].winner = winner;\n            //id2Bet[bet.id].status = BetStatus.Completed;\n\n            //calculate amount of reward for winner\n            uint256 winnerReward = ((bet.betAmount * 2) * 80) / 100;\n            uint protocolFee = (bet.betAmount * 2) - winnerReward;\n            protocolEarnings += protocolFee;\n\n            //transfer funds to the winner\n            (bool sent, bytes memory data) = payable(winner).call{\n                value: winnerReward\n            }(\"\");\n\n            emit BetCompleted(bet.id, bet.player1, bet.player2, bet.betAmount);\n        }\n    }\n\n    //Getters//\n\n    function getPendingBets() public view returns (Bet[] memory) {\n        uint256 allBetsNumber = _id.current();\n        uint256 pendingBetsNumber = 0;\n\n        for (uint i = 1; i <= allBetsNumber; i++) {\n            if (\n                id2Bet[i].status == BetStatus.Created ||\n                id2Bet[i].status == BetStatus.InProgress\n            ) {\n                pendingBetsNumber++;\n            }\n        }\n\n        Bet[] memory pendingBetsArr = new Bet[](pendingBetsNumber);\n        uint256 pendingBetArrLocation = 0;\n        for (uint256 i = 1; i <= pendingBetsNumber; i++) {\n            if (\n                id2Bet[i].status == BetStatus.Created ||\n                id2Bet[i].status == BetStatus.InProgress\n            ) {\n                pendingBetsArr[pendingBetArrLocation] = id2Bet[i];\n                pendingBetArrLocation++;\n            }\n        }\n        return pendingBetsArr;\n    }\n\n    function getBet(uint256 id) public view returns (Bet memory) {\n        return id2Bet[id];\n    }\n\n    function getProtocolEarnings() public view returns (uint256) {\n        return protocolEarnings;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}