{
  "address": "0x084D91Afd2317Ba6e462A3e5Ca2224D85E414D81",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "name": "BetCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        }
      ],
      "name": "createBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum BetContract.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer2",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BetContract.Bet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum BetContract.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer2",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BetContract.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player2",
          "type": "address"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_score",
          "type": "uint256"
        }
      ],
      "name": "updateScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x48db6c9909b5d24937c3392c2e90959a8dfd0c954c811b0d1b0e67da6b3153e4",
  "receipt": {
    "to": null,
    "from": "0x5E7a023dFBeeeBCb6E2B57fb3462E2FbCcf39E95",
    "contractAddress": "0x084D91Afd2317Ba6e462A3e5Ca2224D85E414D81",
    "transactionIndex": 26,
    "gasUsed": "1825332",
    "logsBloom": "0x
    "blockHash": "0xa51275b24b870b7ea12001fb25f8eddaa4d8ce4f11a491460dcf8078bc2c9e44",
    "transactionHash": "0x48db6c9909b5d24937c3392c2e90959a8dfd0c954c811b0d1b0e67da6b3153e4",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 9457260,
        "transactionHash": "0x48db6c9909b5d24937c3392c2e90959a8dfd0c954c811b0d1b0e67da6b3153e4",
        "address": "0x084D91Afd2317Ba6e462A3e5Ca2224D85E414D81",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005e7a023dfbeeebcb6e2b57fb3462e2fbccf39e95"
        ],
        "data": "0x",
        "logIndex": 87,
        "blockHash": "0xa51275b24b870b7ea12001fb25f8eddaa4d8ce4f11a491460dcf8078bc2c9e44"
      }
    ],
    "blockNumber": 9457260,
    "cumulativeGasUsed": "6015211",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5aff518a3a090595013c2729bc2f3c53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"BetCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"}],\"name\":\"createBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum BetContract.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BetContract.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum BetContract.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BetContract.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player2\",\"type\":\"address\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"}],\"name\":\"updateScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bet.sol\":\"BetContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Bet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror BetContract_LessThanMinimumBet();\\n\\ncontract BetContract is Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _id;\\n    uint256 public minimumBet = 0.001 ether;\\n    uint256 private protocolEarnings;\\n    mapping(uint256 => Bet) id2Bet;\\n\\n    enum BetStatus {\\n        Created,\\n        InProgress,\\n        Completed,\\n        Failed\\n    }\\n\\n    struct Bet {\\n        uint256 id;\\n        BetStatus status;\\n        address player1;\\n        uint256 scorePlayer1;\\n        address player2;\\n        uint256 scorePlayer2;\\n        address winner;\\n        uint256 betAmount;\\n    }\\n\\n    event BetCreated(uint256 id, address indexed player1, uint256 amount);\\n    event BetTaken(uint256 id, address indexed player2, uint256 amount);\\n    event BetCompleted(\\n        uint256 id,\\n        address indexed player1,\\n        address indexed player2,\\n        uint256 betAmount\\n    );\\n    event BetFailed(uint256 id, address indexed player1, uint256 amount);\\n\\n    function createBet(address player1) public payable {\\n        require(msg.value >= minimumBet, \\\"Bet less than minimumBet\\\");\\n        _id.increment();\\n        Bet memory newBet = Bet(\\n            _id.current(),\\n            BetStatus.Created,\\n            player1,\\n            0,\\n            address(0),\\n            0,\\n            address(0),\\n            msg.value\\n        );\\n        id2Bet[_id.current()] = newBet;\\n    }\\n\\n    function takeBet(uint256 _betId, address _player2) public payable {\\n        Bet storage bet = id2Bet[_betId];\\n        require(bet.status == BetStatus.Created, \\\"You can't take this bet\\\");\\n        require(bet.betAmount == msg.value, \\\"Bet amount not matched\\\");\\n        bet.status = BetStatus.InProgress;\\n        bet.player2 = _player2;\\n        id2Bet[_betId] = bet;\\n    }\\n\\n    function updateScore(\\n        uint256 _betId,\\n        address _player,\\n        uint256 _score\\n    ) public onlyOwner {\\n        Bet storage updatedBet = id2Bet[_betId];\\n        require(\\n            updatedBet.status == BetStatus.InProgress ||\\n                updatedBet.status == BetStatus.Created,\\n            \\\"Bet status not Created or inProgress\\\"\\n        );\\n        if (updatedBet.player1 == _player) {\\n            updatedBet.scorePlayer1 = _score;\\n        } else if (updatedBet.player2 == _player) {\\n            updatedBet.scorePlayer2 = _score;\\n        } else {\\n            revert(\\\"Invalid player address\\\");\\n        }\\n\\n        declareWinner(updatedBet);\\n    }\\n\\n    function declareWinner(Bet memory bet) private {\\n        if (bet.scorePlayer1 > 0 && bet.scorePlayer2 > 0) {\\n            // Determine the winner based on scores\\n            address winner = bet.scorePlayer1 > bet.scorePlayer2\\n                ? bet.player1\\n                : bet.player2;\\n            id2Bet[bet.id].winner = winner;\\n            //id2Bet[bet.id].status = BetStatus.Completed;\\n\\n            //calculate amount of reward for winner\\n            uint256 winnerReward = ((bet.betAmount * 2) * 80) / 100;\\n            uint protocolFee = (bet.betAmount * 2) - winnerReward;\\n            protocolEarnings += protocolFee;\\n\\n            //transfer funds to the winner\\n            (bool sent, bytes memory data) = payable(winner).call{\\n                value: winnerReward\\n            }(\\\"\\\");\\n\\n            emit BetCompleted(bet.id, bet.player1, bet.player2, bet.betAmount);\\n        }\\n    }\\n\\n    //Getters//\\n\\n    function getPendingBets() public view returns (Bet[] memory) {\\n        uint256 allBetsNumber = _id.current();\\n        uint256 pendingBetsNumber = 0;\\n\\n        for (uint i = 1; i <= allBetsNumber; i++) {\\n            if (\\n                id2Bet[i].status == BetStatus.Created ||\\n                id2Bet[i].status == BetStatus.InProgress\\n            ) {\\n                pendingBetsNumber++;\\n            }\\n        }\\n\\n        Bet[] memory pendingBetsArr = new Bet[](pendingBetsNumber);\\n        uint256 pendingBetArrLocation = 0;\\n        for (uint256 i = 1; i <= pendingBetsNumber; i++) {\\n            if (\\n                id2Bet[i].status == BetStatus.Created ||\\n                id2Bet[i].status == BetStatus.InProgress\\n            ) {\\n                pendingBetsArr[pendingBetArrLocation] = id2Bet[i];\\n                pendingBetArrLocation++;\\n            }\\n        }\\n        return pendingBetsArr;\\n    }\\n\\n    function getBet(uint256 id) public view returns (Bet memory) {\\n        return id2Bet[id];\\n    }\\n\\n    function getProtocolEarnings() public view returns (uint256) {\\n        return protocolEarnings;\\n    }\\n}\\n\",\"keccak256\":\"0x3f34ffc8c1895b08d5222f1daea6cff8e390293a300b5e5d5037b99c788b3d49\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c6800060025534801561001b57600080fd5b5061003861002d61003d60201b60201c565b61004560201b60201c565b610109565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611f41806101186000396000f3fe6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b1461015c578063a4b47b1414610187578063a9d7a87e146101a3578063c38a8afd146101cc578063f2fde38b146101f757610091565b8063061e494f1461009657806360b73966146100d3578063692451a3146100ef578063715018a61461011a5780638020f32414610131575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190611506565b610220565b6040516100ca919061169c565b60405180910390f35b6100ed60048036038101906100e891906116e4565b6103b3565b005b3480156100fb57600080fd5b506101046106ae565b6040516101119190611733565b60405180910390f35b34801561012657600080fd5b5061012f6106b8565b005b34801561013d57600080fd5b506101466106cc565b60405161015391906118a0565b60405180910390f35b34801561016857600080fd5b50610171610a88565b60405161017e91906118d1565b60405180910390f35b6101a1600480360381019061019c91906118ec565b610ab1565b005b3480156101af57600080fd5b506101ca60048036038101906101c59190611919565b610cf1565b005b3480156101d857600080fd5b506101e161104e565b6040516101ee9190611733565b60405180910390f35b34801561020357600080fd5b5061021e600480360381019061021991906118ec565b611054565b005b610228611432565b6004600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff16600381111561027657610275611542565b5b600381111561028857610287611542565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815250509050919050565b6000600460008481526020019081526020016000209050600060038111156103de576103dd611542565b5b8160010160009054906101000a900460ff16600381111561040257610401611542565b5b14610442576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610439906119c9565b60405180910390fd5b34816006015414610488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047f90611a35565b60405180910390fd5b60018160010160006101000a81548160ff021916908360038111156104b0576104af611542565b5b0217905550818160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060046000858152602001908152602001600020600082015481600001556001820160009054906101000a900460ff168160010160006101000a81548160ff0219169083600381111561054e5761054d611542565b5b02179055506001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600482015481600401556005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060068201548160060155905050505050565b6000600354905090565b6106c06110d7565b6106ca6000611155565b565b606060006106da6001611219565b9050600080600190505b8281116107af57600060038111156106ff576106fe611542565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff16600381111561073557610734611542565b5b14806107885750600160038111156107505761074f611542565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff16600381111561078657610785611542565b5b145b1561079c57818061079890611a84565b9250505b80806107a790611a84565b9150506106e4565b5060008167ffffffffffffffff8111156107cc576107cb611acc565b5b60405190808252806020026020018201604052801561080557816020015b6107f2611432565b8152602001906001900390816107ea5790505b509050600080600190505b838111610a7d576000600381111561082b5761082a611542565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff16600381111561086157610860611542565b5b14806108b457506001600381111561087c5761087b611542565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff1660038111156108b2576108b1611542565b5b145b15610a6a576004600082815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff16600381111561090757610906611542565b5b600381111561091957610918611542565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481525050838381518110610a5057610a4f611afb565b5b60200260200101819052508180610a6690611a84565b9250505b8080610a7590611a84565b915050610810565b508194505050505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600254341015610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90611b76565b60405180910390fd5b610b006001611227565b6000604051806101000160405280610b186001611219565b815260200160006003811115610b3157610b30611542565b5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013481525090508060046000610baf6001611219565b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690836003811115610bf257610bf1611542565b5b021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816002015560808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600601559050505050565b610cf96110d7565b600060046000858152602001908152602001600020905060016003811115610d2457610d23611542565b5b8160010160009054906101000a900460ff166003811115610d4857610d47611542565b5b1480610d89575060006003811115610d6357610d62611542565b5b8160010160009054906101000a900460ff166003811115610d8757610d86611542565b5b145b610dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbf90611c08565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e2d57818160020181905550610ece565b8273ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e9257818160040181905550610ecd565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec490611c74565b60405180910390fd5b5b6110488160405180610100016040529081600082015481526020016001820160009054906101000a900460ff166003811115610f0d57610f0c611542565b5b6003811115610f1f57610f1e611542565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152505061123d565b50505050565b60025481565b61105c6110d7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c290611d06565b60405180910390fd5b6110d481611155565b50565b6110df61142a565b73ffffffffffffffffffffffffffffffffffffffff166110fd610a88565b73ffffffffffffffffffffffffffffffffffffffff1614611153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114a90611d72565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6001816000016000828254019250508190555050565b60008160600151118015611255575060008160a00151115b156114275760008160a0015182606001511161127557816080015161127b565b81604001515b905080600460008460000151815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006064605060028560e001516112ed9190611d92565b6112f79190611d92565b6113019190611e03565b905060008160028560e001516113179190611d92565b6113219190611e34565b905080600360008282546113359190611e68565b925050819055506000808473ffffffffffffffffffffffffffffffffffffffff168460405161136390611ecd565b60006040518083038185875af1925050503d80600081146113a0576040519150601f19603f3d011682016040523d82523d6000602084013e6113a5565b606091505b5091509150856080015173ffffffffffffffffffffffffffffffffffffffff16866040015173ffffffffffffffffffffffffffffffffffffffff167fbd0ecc7334be5852eb8be13405182000a8d3f3e011504f04dbdcb113407583ea88600001518960e00151604051611419929190611ee2565b60405180910390a350505050505b50565b600033905090565b604051806101000160405280600081526020016000600381111561145957611458611542565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b6000819050919050565b6114e3816114d0565b81146114ee57600080fd5b50565b600081359050611500816114da565b92915050565b60006020828403121561151c5761151b6114cb565b5b600061152a848285016114f1565b91505092915050565b61153c816114d0565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061158257611581611542565b5b50565b600081905061159382611571565b919050565b60006115a382611585565b9050919050565b6115b381611598565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115e4826115b9565b9050919050565b6115f4816115d9565b82525050565b610100820160008201516116116000850182611533565b50602082015161162460208501826115aa565b50604082015161163760408501826115eb565b50606082015161164a6060850182611533565b50608082015161165d60808501826115eb565b5060a082015161167060a0850182611533565b5060c082015161168360c08501826115eb565b5060e082015161169660e0850182611533565b50505050565b6000610100820190506116b260008301846115fa565b92915050565b6116c1816115d9565b81146116cc57600080fd5b50565b6000813590506116de816116b8565b92915050565b600080604083850312156116fb576116fa6114cb565b5b6000611709858286016114f1565b925050602061171a858286016116cf565b9150509250929050565b61172d816114d0565b82525050565b60006020820190506117486000830184611724565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610100820160008201516117916000850182611533565b5060208201516117a460208501826115aa565b5060408201516117b760408501826115eb565b5060608201516117ca6060850182611533565b5060808201516117dd60808501826115eb565b5060a08201516117f060a0850182611533565b5060c082015161180360c08501826115eb565b5060e082015161181660e0850182611533565b50505050565b6000611828838361177a565b6101008301905092915050565b6000602082019050919050565b600061184d8261174e565b6118578185611759565b93506118628361176a565b8060005b8381101561189357815161187a888261181c565b975061188583611835565b925050600181019050611866565b5085935050505092915050565b600060208201905081810360008301526118ba8184611842565b905092915050565b6118cb816115d9565b82525050565b60006020820190506118e660008301846118c2565b92915050565b600060208284031215611902576119016114cb565b5b6000611910848285016116cf565b91505092915050565b600080600060608486031215611932576119316114cb565b5b6000611940868287016114f1565b9350506020611951868287016116cf565b9250506040611962868287016114f1565b9150509250925092565b600082825260208201905092915050565b7f596f752063616e27742074616b65207468697320626574000000000000000000600082015250565b60006119b360178361196c565b91506119be8261197d565b602082019050919050565b600060208201905081810360008301526119e2816119a6565b9050919050565b7f42657420616d6f756e74206e6f74206d61746368656400000000000000000000600082015250565b6000611a1f60168361196c565b9150611a2a826119e9565b602082019050919050565b60006020820190508181036000830152611a4e81611a12565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a8f826114d0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ac157611ac0611a55565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f426574206c657373207468616e206d696e696d756d4265740000000000000000600082015250565b6000611b6060188361196c565b9150611b6b82611b2a565b602082019050919050565b60006020820190508181036000830152611b8f81611b53565b9050919050565b7f42657420737461747573206e6f742043726561746564206f7220696e50726f6760008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611bf260248361196c565b9150611bfd82611b96565b604082019050919050565b60006020820190508181036000830152611c2181611be5565b9050919050565b7f496e76616c696420706c61796572206164647265737300000000000000000000600082015250565b6000611c5e60168361196c565b9150611c6982611c28565b602082019050919050565b60006020820190508181036000830152611c8d81611c51565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611cf060268361196c565b9150611cfb82611c94565b604082019050919050565b60006020820190508181036000830152611d1f81611ce3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611d5c60208361196c565b9150611d6782611d26565b602082019050919050565b60006020820190508181036000830152611d8b81611d4f565b9050919050565b6000611d9d826114d0565b9150611da8836114d0565b9250828202611db6816114d0565b91508282048414831517611dcd57611dcc611a55565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e0e826114d0565b9150611e19836114d0565b925082611e2957611e28611dd4565b5b828204905092915050565b6000611e3f826114d0565b9150611e4a836114d0565b9250828203905081811115611e6257611e61611a55565b5b92915050565b6000611e73826114d0565b9150611e7e836114d0565b9250828201905080821115611e9657611e95611a55565b5b92915050565b600081905092915050565b50565b6000611eb7600083611e9c565b9150611ec282611ea7565b600082019050919050565b6000611ed882611eaa565b9150819050919050565b6000604082019050611ef76000830185611724565b611f046020830184611724565b939250505056fea264697066735822122059ceb4637b061d1ec39dc3f7f90b4fe1d460c4dba8aefa4390aff1ee7d3d69d364736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b1461015c578063a4b47b1414610187578063a9d7a87e146101a3578063c38a8afd146101cc578063f2fde38b146101f757610091565b8063061e494f1461009657806360b73966146100d3578063692451a3146100ef578063715018a61461011a5780638020f32414610131575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190611506565b610220565b6040516100ca919061169c565b60405180910390f35b6100ed60048036038101906100e891906116e4565b6103b3565b005b3480156100fb57600080fd5b506101046106ae565b6040516101119190611733565b60405180910390f35b34801561012657600080fd5b5061012f6106b8565b005b34801561013d57600080fd5b506101466106cc565b60405161015391906118a0565b60405180910390f35b34801561016857600080fd5b50610171610a88565b60405161017e91906118d1565b60405180910390f35b6101a1600480360381019061019c91906118ec565b610ab1565b005b3480156101af57600080fd5b506101ca60048036038101906101c59190611919565b610cf1565b005b3480156101d857600080fd5b506101e161104e565b6040516101ee9190611733565b60405180910390f35b34801561020357600080fd5b5061021e600480360381019061021991906118ec565b611054565b005b610228611432565b6004600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff16600381111561027657610275611542565b5b600381111561028857610287611542565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815250509050919050565b6000600460008481526020019081526020016000209050600060038111156103de576103dd611542565b5b8160010160009054906101000a900460ff16600381111561040257610401611542565b5b14610442576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610439906119c9565b60405180910390fd5b34816006015414610488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047f90611a35565b60405180910390fd5b60018160010160006101000a81548160ff021916908360038111156104b0576104af611542565b5b0217905550818160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060046000858152602001908152602001600020600082015481600001556001820160009054906101000a900460ff168160010160006101000a81548160ff0219169083600381111561054e5761054d611542565b5b02179055506001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600482015481600401556005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060068201548160060155905050505050565b6000600354905090565b6106c06110d7565b6106ca6000611155565b565b606060006106da6001611219565b9050600080600190505b8281116107af57600060038111156106ff576106fe611542565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff16600381111561073557610734611542565b5b14806107885750600160038111156107505761074f611542565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff16600381111561078657610785611542565b5b145b1561079c57818061079890611a84565b9250505b80806107a790611a84565b9150506106e4565b5060008167ffffffffffffffff8111156107cc576107cb611acc565b5b60405190808252806020026020018201604052801561080557816020015b6107f2611432565b8152602001906001900390816107ea5790505b509050600080600190505b838111610a7d576000600381111561082b5761082a611542565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff16600381111561086157610860611542565b5b14806108b457506001600381111561087c5761087b611542565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff1660038111156108b2576108b1611542565b5b145b15610a6a576004600082815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff16600381111561090757610906611542565b5b600381111561091957610918611542565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481525050838381518110610a5057610a4f611afb565b5b60200260200101819052508180610a6690611a84565b9250505b8080610a7590611a84565b915050610810565b508194505050505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600254341015610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90611b76565b60405180910390fd5b610b006001611227565b6000604051806101000160405280610b186001611219565b815260200160006003811115610b3157610b30611542565b5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013481525090508060046000610baf6001611219565b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690836003811115610bf257610bf1611542565b5b021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816002015560808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600601559050505050565b610cf96110d7565b600060046000858152602001908152602001600020905060016003811115610d2457610d23611542565b5b8160010160009054906101000a900460ff166003811115610d4857610d47611542565b5b1480610d89575060006003811115610d6357610d62611542565b5b8160010160009054906101000a900460ff166003811115610d8757610d86611542565b5b145b610dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbf90611c08565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e2d57818160020181905550610ece565b8273ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e9257818160040181905550610ecd565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec490611c74565b60405180910390fd5b5b6110488160405180610100016040529081600082015481526020016001820160009054906101000a900460ff166003811115610f0d57610f0c611542565b5b6003811115610f1f57610f1e611542565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152505061123d565b50505050565b60025481565b61105c6110d7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c290611d06565b60405180910390fd5b6110d481611155565b50565b6110df61142a565b73ffffffffffffffffffffffffffffffffffffffff166110fd610a88565b73ffffffffffffffffffffffffffffffffffffffff1614611153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114a90611d72565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6001816000016000828254019250508190555050565b60008160600151118015611255575060008160a00151115b156114275760008160a0015182606001511161127557816080015161127b565b81604001515b905080600460008460000151815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006064605060028560e001516112ed9190611d92565b6112f79190611d92565b6113019190611e03565b905060008160028560e001516113179190611d92565b6113219190611e34565b905080600360008282546113359190611e68565b925050819055506000808473ffffffffffffffffffffffffffffffffffffffff168460405161136390611ecd565b60006040518083038185875af1925050503d80600081146113a0576040519150601f19603f3d011682016040523d82523d6000602084013e6113a5565b606091505b5091509150856080015173ffffffffffffffffffffffffffffffffffffffff16866040015173ffffffffffffffffffffffffffffffffffffffff167fbd0ecc7334be5852eb8be13405182000a8d3f3e011504f04dbdcb113407583ea88600001518960e00151604051611419929190611ee2565b60405180910390a350505050505b50565b600033905090565b604051806101000160405280600081526020016000600381111561145957611458611542565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b6000819050919050565b6114e3816114d0565b81146114ee57600080fd5b50565b600081359050611500816114da565b92915050565b60006020828403121561151c5761151b6114cb565b5b600061152a848285016114f1565b91505092915050565b61153c816114d0565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061158257611581611542565b5b50565b600081905061159382611571565b919050565b60006115a382611585565b9050919050565b6115b381611598565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115e4826115b9565b9050919050565b6115f4816115d9565b82525050565b610100820160008201516116116000850182611533565b50602082015161162460208501826115aa565b50604082015161163760408501826115eb565b50606082015161164a6060850182611533565b50608082015161165d60808501826115eb565b5060a082015161167060a0850182611533565b5060c082015161168360c08501826115eb565b5060e082015161169660e0850182611533565b50505050565b6000610100820190506116b260008301846115fa565b92915050565b6116c1816115d9565b81146116cc57600080fd5b50565b6000813590506116de816116b8565b92915050565b600080604083850312156116fb576116fa6114cb565b5b6000611709858286016114f1565b925050602061171a858286016116cf565b9150509250929050565b61172d816114d0565b82525050565b60006020820190506117486000830184611724565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610100820160008201516117916000850182611533565b5060208201516117a460208501826115aa565b5060408201516117b760408501826115eb565b5060608201516117ca6060850182611533565b5060808201516117dd60808501826115eb565b5060a08201516117f060a0850182611533565b5060c082015161180360c08501826115eb565b5060e082015161181660e0850182611533565b50505050565b6000611828838361177a565b6101008301905092915050565b6000602082019050919050565b600061184d8261174e565b6118578185611759565b93506118628361176a565b8060005b8381101561189357815161187a888261181c565b975061188583611835565b925050600181019050611866565b5085935050505092915050565b600060208201905081810360008301526118ba8184611842565b905092915050565b6118cb816115d9565b82525050565b60006020820190506118e660008301846118c2565b92915050565b600060208284031215611902576119016114cb565b5b6000611910848285016116cf565b91505092915050565b600080600060608486031215611932576119316114cb565b5b6000611940868287016114f1565b9350506020611951868287016116cf565b9250506040611962868287016114f1565b9150509250925092565b600082825260208201905092915050565b7f596f752063616e27742074616b65207468697320626574000000000000000000600082015250565b60006119b360178361196c565b91506119be8261197d565b602082019050919050565b600060208201905081810360008301526119e2816119a6565b9050919050565b7f42657420616d6f756e74206e6f74206d61746368656400000000000000000000600082015250565b6000611a1f60168361196c565b9150611a2a826119e9565b602082019050919050565b60006020820190508181036000830152611a4e81611a12565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a8f826114d0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ac157611ac0611a55565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f426574206c657373207468616e206d696e696d756d4265740000000000000000600082015250565b6000611b6060188361196c565b9150611b6b82611b2a565b602082019050919050565b60006020820190508181036000830152611b8f81611b53565b9050919050565b7f42657420737461747573206e6f742043726561746564206f7220696e50726f6760008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611bf260248361196c565b9150611bfd82611b96565b604082019050919050565b60006020820190508181036000830152611c2181611be5565b9050919050565b7f496e76616c696420706c61796572206164647265737300000000000000000000600082015250565b6000611c5e60168361196c565b9150611c6982611c28565b602082019050919050565b60006020820190508181036000830152611c8d81611c51565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611cf060268361196c565b9150611cfb82611c94565b604082019050919050565b60006020820190508181036000830152611d1f81611ce3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611d5c60208361196c565b9150611d6782611d26565b602082019050919050565b60006020820190508181036000830152611d8b81611d4f565b9050919050565b6000611d9d826114d0565b9150611da8836114d0565b9250828202611db6816114d0565b91508282048414831517611dcd57611dcc611a55565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e0e826114d0565b9150611e19836114d0565b925082611e2957611e28611dd4565b5b828204905092915050565b6000611e3f826114d0565b9150611e4a836114d0565b9250828203905081811115611e6257611e61611a55565b5b92915050565b6000611e73826114d0565b9150611e7e836114d0565b9250828201905080821115611e9657611e95611a55565b5b92915050565b600081905092915050565b50565b6000611eb7600083611e9c565b9150611ec282611ea7565b600082019050919050565b6000611ed882611eaa565b9150819050919050565b6000604082019050611ef76000830185611724565b611f046020830184611724565b939250505056fea264697066735822122059ceb4637b061d1ec39dc3f7f90b4fe1d460c4dba8aefa4390aff1ee7d3d69d364736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 223,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "_id",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)140_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "minimumBet",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 228,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "protocolEarnings",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 233,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "id2Bet",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Bet)256_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)238": {
        "encoding": "inplace",
        "label": "enum BetContract.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Bet)256_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BetContract.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)256_storage"
      },
      "t_struct(Bet)256_storage": {
        "encoding": "inplace",
        "label": "struct BetContract.Bet",
        "members": [
          {
            "astId": 240,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 243,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(BetStatus)238"
          },
          {
            "astId": 245,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "player1",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 247,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "scorePlayer1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 249,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "player2",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 251,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "scorePlayer2",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 253,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "winner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 255,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "betAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Counter)140_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 139,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}