{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        }
      ],
      "name": "createBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum BetContract.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer2",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BetContract.Bet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum BetContract.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer2",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BetContract.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player2",
          "type": "address"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_score",
          "type": "uint256"
        }
      ],
      "name": "updateScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe72c4e67fa8d7a15c5bbcd9abcb886d56810ddc30d4fac91876aa52cbe85c440",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1517589",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000040020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000040000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x345db1bf962e427e37dda3036ed79d9428f6002d8158a613e607d1c5379985d5",
    "transactionHash": "0xe72c4e67fa8d7a15c5bbcd9abcb886d56810ddc30d4fac91876aa52cbe85c440",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xe72c4e67fa8d7a15c5bbcd9abcb886d56810ddc30d4fac91876aa52cbe85c440",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x345db1bf962e427e37dda3036ed79d9428f6002d8158a613e607d1c5379985d5"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1517589",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2c72267b63806a81437cb784876e7fff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"}],\"name\":\"createBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum BetContract.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BetContract.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum BetContract.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BetContract.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player2\",\"type\":\"address\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"}],\"name\":\"updateScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bet.sol\":\"BetContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Bet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror BetContract_LessThanMinimumBet();\\n\\ncontract BetContract is Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _id;\\n    uint256 public minimumBet = 0.001 ether;\\n    mapping(uint256 => Bet) id2Bet;\\n\\n    enum BetStatus {\\n        Created,\\n        InProgress,\\n        Completed,\\n        Failed\\n    }\\n\\n    struct Bet {\\n        uint256 id;\\n        BetStatus status;\\n        address player1;\\n        uint256 scorePlayer1;\\n        address player2;\\n        uint256 scorePlayer2;\\n        address winner;\\n        uint256 betAmount;\\n    }\\n\\n    event BetCreated(uint256 id, address indexed player1, uint256 amount);\\n    event BetTaken(uint256 id, address indexed player2, uint256 amount);\\n    event BetCompleted(\\n        uint256 id,\\n        address indexed player1,\\n        address indexed player2,\\n        uint256 amount\\n    );\\n    event BetFailed(uint256 id, address indexed player1, uint256 amount);\\n\\n    function createBet(address player1) public payable {\\n        require(msg.value > minimumBet, \\\"Bet less than minimumBet\\\");\\n        _id.increment();\\n        Bet memory newBet = Bet(\\n            _id.current(),\\n            BetStatus.Created,\\n            player1,\\n            0,\\n            address(0),\\n            0,\\n            address(0),\\n            msg.value\\n        );\\n        id2Bet[_id.current()] = newBet;\\n    }\\n\\n    function takeBet(uint256 _betId, address _player2) public payable {\\n        Bet storage bet = id2Bet[_betId];\\n        require(bet.status == BetStatus.Created, \\\"You can't take this bet\\\");\\n        require(bet.betAmount == msg.value, \\\"Bet amount not matched\\\");\\n        bet.status = BetStatus.InProgress;\\n        bet.player2 = _player2;\\n        id2Bet[_betId] = bet;\\n    }\\n\\n    function updateScore(\\n        uint256 _betId,\\n        address _player,\\n        uint256 _score\\n    ) public onlyOwner {\\n        Bet storage updatedBet = id2Bet[_betId];\\n        require(\\n            updatedBet.status == BetStatus.InProgress,\\n            \\\"Bet status not inProgress\\\"\\n        );\\n        if (updatedBet.player1 == _player) {\\n            updatedBet.scorePlayer1 = _score;\\n        } else if (updatedBet.player2 == _player) {\\n            updatedBet.scorePlayer2 == _score;\\n        } else {\\n            revert(\\\"Invalid player address\\\");\\n        }\\n    }\\n\\n    //Getters//\\n\\n    function getPendingBets() public view returns (Bet[] memory) {\\n        uint256 allBetsNumber = _id.current();\\n        uint256 pendingBetsNumber = 0;\\n\\n        for (uint i = 1; i <= allBetsNumber; i++) {\\n            if (\\n                id2Bet[i].status == BetStatus.Created ||\\n                id2Bet[i].status == BetStatus.InProgress\\n            ) {\\n                pendingBetsNumber++;\\n            }\\n        }\\n\\n        Bet[] memory pendingBetsArr = new Bet[](pendingBetsNumber);\\n        uint256 pendingBetArrLocation = 0;\\n        for (uint256 i = 1; i <= pendingBetsNumber; i++) {\\n            if (\\n                id2Bet[i].status == BetStatus.Created ||\\n                id2Bet[i].status == BetStatus.InProgress\\n            ) {\\n                pendingBetsArr[pendingBetArrLocation] = id2Bet[i];\\n                pendingBetArrLocation++;\\n            }\\n        }\\n        return pendingBetsArr;\\n    }\\n\\n    function getBet(uint256 id) public view returns (Bet memory) {\\n        return id2Bet[id];\\n    }\\n}\\n\",\"keccak256\":\"0x63daa34f7ffff855258878fb7ca9c8fd1001b8271d9e16c876f4636f3de41f4e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c6800060025534801561001b57600080fd5b5061003861002d61003d60201b60201c565b61004560201b60201c565b610109565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6119ad806101186000396000f3fe6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b14610126578063a4b47b1414610151578063a9d7a87e1461016d578063c38a8afd14610196578063f2fde38b146101c157610086565b8063061e494f1461008b57806360b73966146100c8578063715018a6146100e45780638020f324146100fb575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611111565b6101ea565b6040516100bf91906112a7565b60405180910390f35b6100e260048036038101906100dd91906112ef565b61037d565b005b3480156100f057600080fd5b506100f9610678565b005b34801561010757600080fd5b5061011061068c565b60405161011d9190611481565b60405180910390f35b34801561013257600080fd5b5061013b610a48565b60405161014891906114b2565b60405180910390f35b61016b600480360381019061016691906114cd565b610a71565b005b34801561017957600080fd5b50610194600480360381019061018f91906114fa565b610cb0565b005b3480156101a257600080fd5b506101ab610e46565b6040516101b8919061155c565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e391906114cd565b610e4c565b005b6101f261103d565b6003600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff1660038111156102405761023f61114d565b5b60038111156102525761025161114d565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815250509050919050565b6000600360008481526020019081526020016000209050600060038111156103a8576103a761114d565b5b8160010160009054906101000a900460ff1660038111156103cc576103cb61114d565b5b1461040c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610403906115d4565b60405180910390fd5b34816006015414610452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044990611640565b60405180910390fd5b60018160010160006101000a81548160ff0219169083600381111561047a5761047961114d565b5b0217905550818160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060036000858152602001908152602001600020600082015481600001556001820160009054906101000a900460ff168160010160006101000a81548160ff021916908360038111156105185761051761114d565b5b02179055506001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600482015481600401556005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060068201548160060155905050505050565b610680610ecf565b61068a6000610f4d565b565b6060600061069a6001611011565b9050600080600190505b82811161076f57600060038111156106bf576106be61114d565b5b6003600083815260200190815260200160002060010160009054906101000a900460ff1660038111156106f5576106f461114d565b5b14806107485750600160038111156107105761070f61114d565b5b6003600083815260200190815260200160002060010160009054906101000a900460ff1660038111156107465761074561114d565b5b145b1561075c5781806107589061168f565b9250505b80806107679061168f565b9150506106a4565b5060008167ffffffffffffffff81111561078c5761078b6116d7565b5b6040519080825280602002602001820160405280156107c557816020015b6107b261103d565b8152602001906001900390816107aa5790505b509050600080600190505b838111610a3d57600060038111156107eb576107ea61114d565b5b6003600083815260200190815260200160002060010160009054906101000a900460ff1660038111156108215761082061114d565b5b148061087457506001600381111561083c5761083b61114d565b5b6003600083815260200190815260200160002060010160009054906101000a900460ff1660038111156108725761087161114d565b5b145b15610a2a576003600082815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff1660038111156108c7576108c661114d565b5b60038111156108d9576108d861114d565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481525050838381518110610a1057610a0f611706565b5b60200260200101819052508180610a269061168f565b9250505b8080610a359061168f565b9150506107d0565b508194505050505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002543411610ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aac90611781565b60405180910390fd5b610abf600161101f565b6000604051806101000160405280610ad76001611011565b815260200160006003811115610af057610aef61114d565b5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013481525090508060036000610b6e6001611011565b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690836003811115610bb157610bb061114d565b5b021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816002015560808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600601559050505050565b610cb8610ecf565b600060036000858152602001908152602001600020905060016003811115610ce357610ce261114d565b5b8160010160009054906101000a900460ff166003811115610d0757610d0661114d565b5b14610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e906117ed565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610dac57818160020181905550610e40565b8273ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160315610e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3690611859565b60405180910390fd5b5b50505050565b60025481565b610e54610ecf565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ec3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eba906118eb565b60405180910390fd5b610ecc81610f4d565b50565b610ed7611035565b73ffffffffffffffffffffffffffffffffffffffff16610ef5610a48565b73ffffffffffffffffffffffffffffffffffffffff1614610f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4290611957565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600033905090565b60405180610100016040528060008152602001600060038111156110645761106361114d565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b6000819050919050565b6110ee816110db565b81146110f957600080fd5b50565b60008135905061110b816110e5565b92915050565b600060208284031215611127576111266110d6565b5b6000611135848285016110fc565b91505092915050565b611147816110db565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061118d5761118c61114d565b5b50565b600081905061119e8261117c565b919050565b60006111ae82611190565b9050919050565b6111be816111a3565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111ef826111c4565b9050919050565b6111ff816111e4565b82525050565b6101008201600082015161121c600085018261113e565b50602082015161122f60208501826111b5565b50604082015161124260408501826111f6565b506060820151611255606085018261113e565b50608082015161126860808501826111f6565b5060a082015161127b60a085018261113e565b5060c082015161128e60c08501826111f6565b5060e08201516112a160e085018261113e565b50505050565b6000610100820190506112bd6000830184611205565b92915050565b6112cc816111e4565b81146112d757600080fd5b50565b6000813590506112e9816112c3565b92915050565b60008060408385031215611306576113056110d6565b5b6000611314858286016110fc565b9250506020611325858286016112da565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61010082016000820151611372600085018261113e565b50602082015161138560208501826111b5565b50604082015161139860408501826111f6565b5060608201516113ab606085018261113e565b5060808201516113be60808501826111f6565b5060a08201516113d160a085018261113e565b5060c08201516113e460c08501826111f6565b5060e08201516113f760e085018261113e565b50505050565b6000611409838361135b565b6101008301905092915050565b6000602082019050919050565b600061142e8261132f565b611438818561133a565b93506114438361134b565b8060005b8381101561147457815161145b88826113fd565b975061146683611416565b925050600181019050611447565b5085935050505092915050565b6000602082019050818103600083015261149b8184611423565b905092915050565b6114ac816111e4565b82525050565b60006020820190506114c760008301846114a3565b92915050565b6000602082840312156114e3576114e26110d6565b5b60006114f1848285016112da565b91505092915050565b600080600060608486031215611513576115126110d6565b5b6000611521868287016110fc565b9350506020611532868287016112da565b9250506040611543868287016110fc565b9150509250925092565b611556816110db565b82525050565b6000602082019050611571600083018461154d565b92915050565b600082825260208201905092915050565b7f596f752063616e27742074616b65207468697320626574000000000000000000600082015250565b60006115be601783611577565b91506115c982611588565b602082019050919050565b600060208201905081810360008301526115ed816115b1565b9050919050565b7f42657420616d6f756e74206e6f74206d61746368656400000000000000000000600082015250565b600061162a601683611577565b9150611635826115f4565b602082019050919050565b600060208201905081810360008301526116598161161d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061169a826110db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116cc576116cb611660565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f426574206c657373207468616e206d696e696d756d4265740000000000000000600082015250565b600061176b601883611577565b915061177682611735565b602082019050919050565b6000602082019050818103600083015261179a8161175e565b9050919050565b7f42657420737461747573206e6f7420696e50726f677265737300000000000000600082015250565b60006117d7601983611577565b91506117e2826117a1565b602082019050919050565b60006020820190508181036000830152611806816117ca565b9050919050565b7f496e76616c696420706c61796572206164647265737300000000000000000000600082015250565b6000611843601683611577565b915061184e8261180d565b602082019050919050565b6000602082019050818103600083015261187281611836565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006118d5602683611577565b91506118e082611879565b604082019050919050565b60006020820190508181036000830152611904816118c8565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611941602083611577565b915061194c8261190b565b602082019050919050565b6000602082019050818103600083015261197081611934565b905091905056fea26469706673582212205a7e36609a57b1200700217de71ad739f96ea869022f3549de8ff4ee3f74c02464736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b14610126578063a4b47b1414610151578063a9d7a87e1461016d578063c38a8afd14610196578063f2fde38b146101c157610086565b8063061e494f1461008b57806360b73966146100c8578063715018a6146100e45780638020f324146100fb575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611111565b6101ea565b6040516100bf91906112a7565b60405180910390f35b6100e260048036038101906100dd91906112ef565b61037d565b005b3480156100f057600080fd5b506100f9610678565b005b34801561010757600080fd5b5061011061068c565b60405161011d9190611481565b60405180910390f35b34801561013257600080fd5b5061013b610a48565b60405161014891906114b2565b60405180910390f35b61016b600480360381019061016691906114cd565b610a71565b005b34801561017957600080fd5b50610194600480360381019061018f91906114fa565b610cb0565b005b3480156101a257600080fd5b506101ab610e46565b6040516101b8919061155c565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e391906114cd565b610e4c565b005b6101f261103d565b6003600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff1660038111156102405761023f61114d565b5b60038111156102525761025161114d565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815250509050919050565b6000600360008481526020019081526020016000209050600060038111156103a8576103a761114d565b5b8160010160009054906101000a900460ff1660038111156103cc576103cb61114d565b5b1461040c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610403906115d4565b60405180910390fd5b34816006015414610452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044990611640565b60405180910390fd5b60018160010160006101000a81548160ff0219169083600381111561047a5761047961114d565b5b0217905550818160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060036000858152602001908152602001600020600082015481600001556001820160009054906101000a900460ff168160010160006101000a81548160ff021916908360038111156105185761051761114d565b5b02179055506001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600482015481600401556005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060068201548160060155905050505050565b610680610ecf565b61068a6000610f4d565b565b6060600061069a6001611011565b9050600080600190505b82811161076f57600060038111156106bf576106be61114d565b5b6003600083815260200190815260200160002060010160009054906101000a900460ff1660038111156106f5576106f461114d565b5b14806107485750600160038111156107105761070f61114d565b5b6003600083815260200190815260200160002060010160009054906101000a900460ff1660038111156107465761074561114d565b5b145b1561075c5781806107589061168f565b9250505b80806107679061168f565b9150506106a4565b5060008167ffffffffffffffff81111561078c5761078b6116d7565b5b6040519080825280602002602001820160405280156107c557816020015b6107b261103d565b8152602001906001900390816107aa5790505b509050600080600190505b838111610a3d57600060038111156107eb576107ea61114d565b5b6003600083815260200190815260200160002060010160009054906101000a900460ff1660038111156108215761082061114d565b5b148061087457506001600381111561083c5761083b61114d565b5b6003600083815260200190815260200160002060010160009054906101000a900460ff1660038111156108725761087161114d565b5b145b15610a2a576003600082815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff1660038111156108c7576108c661114d565b5b60038111156108d9576108d861114d565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481525050838381518110610a1057610a0f611706565b5b60200260200101819052508180610a269061168f565b9250505b8080610a359061168f565b9150506107d0565b508194505050505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002543411610ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aac90611781565b60405180910390fd5b610abf600161101f565b6000604051806101000160405280610ad76001611011565b815260200160006003811115610af057610aef61114d565b5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013481525090508060036000610b6e6001611011565b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690836003811115610bb157610bb061114d565b5b021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816002015560808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600601559050505050565b610cb8610ecf565b600060036000858152602001908152602001600020905060016003811115610ce357610ce261114d565b5b8160010160009054906101000a900460ff166003811115610d0757610d0661114d565b5b14610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e906117ed565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610dac57818160020181905550610e40565b8273ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160315610e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3690611859565b60405180910390fd5b5b50505050565b60025481565b610e54610ecf565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ec3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eba906118eb565b60405180910390fd5b610ecc81610f4d565b50565b610ed7611035565b73ffffffffffffffffffffffffffffffffffffffff16610ef5610a48565b73ffffffffffffffffffffffffffffffffffffffff1614610f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4290611957565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600033905090565b60405180610100016040528060008152602001600060038111156110645761106361114d565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b6000819050919050565b6110ee816110db565b81146110f957600080fd5b50565b60008135905061110b816110e5565b92915050565b600060208284031215611127576111266110d6565b5b6000611135848285016110fc565b91505092915050565b611147816110db565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061118d5761118c61114d565b5b50565b600081905061119e8261117c565b919050565b60006111ae82611190565b9050919050565b6111be816111a3565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111ef826111c4565b9050919050565b6111ff816111e4565b82525050565b6101008201600082015161121c600085018261113e565b50602082015161122f60208501826111b5565b50604082015161124260408501826111f6565b506060820151611255606085018261113e565b50608082015161126860808501826111f6565b5060a082015161127b60a085018261113e565b5060c082015161128e60c08501826111f6565b5060e08201516112a160e085018261113e565b50505050565b6000610100820190506112bd6000830184611205565b92915050565b6112cc816111e4565b81146112d757600080fd5b50565b6000813590506112e9816112c3565b92915050565b60008060408385031215611306576113056110d6565b5b6000611314858286016110fc565b9250506020611325858286016112da565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61010082016000820151611372600085018261113e565b50602082015161138560208501826111b5565b50604082015161139860408501826111f6565b5060608201516113ab606085018261113e565b5060808201516113be60808501826111f6565b5060a08201516113d160a085018261113e565b5060c08201516113e460c08501826111f6565b5060e08201516113f760e085018261113e565b50505050565b6000611409838361135b565b6101008301905092915050565b6000602082019050919050565b600061142e8261132f565b611438818561133a565b93506114438361134b565b8060005b8381101561147457815161145b88826113fd565b975061146683611416565b925050600181019050611447565b5085935050505092915050565b6000602082019050818103600083015261149b8184611423565b905092915050565b6114ac816111e4565b82525050565b60006020820190506114c760008301846114a3565b92915050565b6000602082840312156114e3576114e26110d6565b5b60006114f1848285016112da565b91505092915050565b600080600060608486031215611513576115126110d6565b5b6000611521868287016110fc565b9350506020611532868287016112da565b9250506040611543868287016110fc565b9150509250925092565b611556816110db565b82525050565b6000602082019050611571600083018461154d565b92915050565b600082825260208201905092915050565b7f596f752063616e27742074616b65207468697320626574000000000000000000600082015250565b60006115be601783611577565b91506115c982611588565b602082019050919050565b600060208201905081810360008301526115ed816115b1565b9050919050565b7f42657420616d6f756e74206e6f74206d61746368656400000000000000000000600082015250565b600061162a601683611577565b9150611635826115f4565b602082019050919050565b600060208201905081810360008301526116598161161d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061169a826110db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116cc576116cb611660565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f426574206c657373207468616e206d696e696d756d4265740000000000000000600082015250565b600061176b601883611577565b915061177682611735565b602082019050919050565b6000602082019050818103600083015261179a8161175e565b9050919050565b7f42657420737461747573206e6f7420696e50726f677265737300000000000000600082015250565b60006117d7601983611577565b91506117e2826117a1565b602082019050919050565b60006020820190508181036000830152611806816117ca565b9050919050565b7f496e76616c696420706c61796572206164647265737300000000000000000000600082015250565b6000611843601683611577565b915061184e8261180d565b602082019050919050565b6000602082019050818103600083015261187281611836565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006118d5602683611577565b91506118e082611879565b604082019050919050565b60006020820190508181036000830152611904816118c8565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611941602083611577565b915061194c8261190b565b602082019050919050565b6000602082019050818103600083015261197081611934565b905091905056fea26469706673582212205a7e36609a57b1200700217de71ad739f96ea869022f3549de8ff4ee3f74c02464736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 223,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "_id",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)140_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "minimumBet",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 231,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "id2Bet",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Bet)254_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)236": {
        "encoding": "inplace",
        "label": "enum BetContract.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Bet)254_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BetContract.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)254_storage"
      },
      "t_struct(Bet)254_storage": {
        "encoding": "inplace",
        "label": "struct BetContract.Bet",
        "members": [
          {
            "astId": 238,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 241,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(BetStatus)236"
          },
          {
            "astId": 243,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "player1",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 245,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "scorePlayer1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 247,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "player2",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 249,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "scorePlayer2",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 251,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "winner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 253,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "betAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Counter)140_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 139,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}