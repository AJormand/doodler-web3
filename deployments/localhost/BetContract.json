{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        }
      ],
      "name": "createBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum BetContract.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer2",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            }
          ],
          "internalType": "struct BetContract.Bet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum BetContract.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer2",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            }
          ],
          "internalType": "struct BetContract.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player2",
          "type": "address"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_score",
          "type": "uint256"
        }
      ],
      "name": "updateScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d6c815f26c2e91956a10fba475dbed41ecf41ca72ad38e732a6923c2dc73b7d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1360284",
    "logsBloom": "0x
    "blockHash": "0x3204cb53dfe07ec38ef56ce8a3b06b0405bba050f71c030b28361802a6929263",
    "transactionHash": "0x9d6c815f26c2e91956a10fba475dbed41ecf41ca72ad38e732a6923c2dc73b7d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x9d6c815f26c2e91956a10fba475dbed41ecf41ca72ad38e732a6923c2dc73b7d",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3204cb53dfe07ec38ef56ce8a3b06b0405bba050f71c030b28361802a6929263"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1360284",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ade9ee693ead3a1f12b35b7a22446243",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"}],\"name\":\"createBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum BetContract.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct BetContract.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum BetContract.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct BetContract.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player2\",\"type\":\"address\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"}],\"name\":\"updateScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bet.sol\":\"BetContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Bet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror BetContract_LessThanMinimumBet();\\n\\ncontract BetContract is Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _id;\\n    uint256 public minimumBet = 0.001 ether;\\n    Bet[] pendingBets;\\n    mapping(uint256 => Bet) id2Bet;\\n\\n    enum BetStatus {\\n        Created,\\n        InProgress,\\n        Completed,\\n        Failed\\n    }\\n\\n    struct Bet {\\n        uint256 id;\\n        BetStatus status;\\n        address player1;\\n        uint256 scorePlayer1;\\n        address player2;\\n        uint256 scorePlayer2;\\n        address winner;\\n    }\\n\\n    function createBet(address player1) public payable {\\n        require(msg.value > minimumBet, \\\"Bet less than minimumBet\\\");\\n        _id.increment();\\n        Bet memory newBet = Bet(\\n            _id.current(),\\n            BetStatus.Created,\\n            player1,\\n            0,\\n            address(0),\\n            0,\\n            address(0)\\n        );\\n        pendingBets.push(newBet);\\n    }\\n\\n    function takeBet(uint256 _betId, address _player2) public payable {\\n        Bet memory bet = id2Bet[_betId];\\n        require(bet.status == BetStatus.Created, \\\"You can't take this bet\\\");\\n        bet.status = BetStatus.InProgress;\\n        bet.player2 = _player2;\\n    }\\n\\n    function updateScore(\\n        uint256 _betId,\\n        address _player,\\n        uint256 _score\\n    ) public onlyOwner {\\n        Bet storage updatedBet = id2Bet[_betId];\\n        require(\\n            updatedBet.status == BetStatus.InProgress,\\n            \\\"Bet status not inProgress\\\"\\n        );\\n        if (updatedBet.player1 == _player) {\\n            updatedBet.scorePlayer1 = _score;\\n        } else if (updatedBet.player2 == _player) {\\n            updatedBet.scorePlayer2 == _score;\\n        } else {\\n            revert(\\\"Invalid player address\\\");\\n        }\\n    }\\n\\n    //Getters//\\n\\n    function getPendingBets() public view returns (Bet[] memory) {\\n        uint256 pendingBetsNumber = pendingBets.length;\\n        Bet[] memory result = new Bet[](pendingBetsNumber);\\n        for (uint256 i = 0; i < pendingBetsNumber; i++) {\\n            result[i] = pendingBets[i];\\n        }\\n        return result;\\n    }\\n\\n    function getBet(uint256 id) public view returns (Bet memory) {\\n        return id2Bet[id];\\n    }\\n}\\n\",\"keccak256\":\"0xefe48299f91030defb4d88cdaad5a7307f5f3cfa84655b0aba8b917dbbe32465\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c6800060025534801561001b57600080fd5b5061003861002d61003d60201b60201c565b61004560201b60201c565b610109565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6116d1806101186000396000f3fe6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b14610126578063a4b47b1414610151578063a9d7a87e1461016d578063c38a8afd14610196578063f2fde38b146101c157610086565b8063061e494f1461008b57806360b73966146100c8578063715018a6146100e45780638020f324146100fb575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ecb565b6101ea565b6040516100bf919061104d565b60405180910390f35b6100e260048036038101906100dd9190611094565b610372565b005b3480156100f057600080fd5b506100f96105c8565b005b34801561010757600080fd5b506101106105dc565b60405161011d9190611211565b60405180910390f35b34801561013257600080fd5b5061013b61080d565b6040516101489190611242565b60405180910390f35b61016b6004803603810190610166919061125d565b610836565b005b34801561017957600080fd5b50610194600480360381019061018f919061128a565b610a72565b005b3480156101a257600080fd5b506101ab610c08565b6040516101b891906112ec565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e3919061125d565b610c0e565b005b6101f2610dff565b600460008381526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a900460ff16600381111561023f5761023e610f07565b5b600381111561025157610250610f07565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6000600460008481526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a900460ff1660038111156103c1576103c0610f07565b5b60038111156103d3576103d2610f07565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000600381111561050357610502610f07565b5b8160200151600381111561051a57610519610f07565b5b1461055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055190611364565b60405180910390fd5b60018160200190600381111561057357610572610f07565b5b9081600381111561058757610586610f07565b5b8152505081816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050505050565b6105d0610c91565b6105da6000610d0f565b565b60606000600380549050905060008167ffffffffffffffff81111561060457610603611384565b5b60405190808252806020026020018201604052801561063d57816020015b61062a610dff565b8152602001906001900390816106225790505b50905060005b82811015610804576003818154811061065f5761065e6113b3565b5b90600052602060002090600602016040518060e0016040529081600082015481526020016001820160009054906101000a900460ff1660038111156106a7576106a6610f07565b5b60038111156106b9576106b8610f07565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508282815181106107e6576107e56113b3565b5b602002602001018190525080806107fc90611411565b915050610643565b50809250505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600254341161087a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610871906114a5565b60405180910390fd5b6108846001610dd3565b60006040518060e0016040528061089b6001610de9565b8152602001600060038111156108b4576108b3610f07565b5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060038190806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548160ff0219169083600381111561097e5761097d610f07565b5b021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816002015560808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b610a7a610c91565b600060046000858152602001908152602001600020905060016003811115610aa557610aa4610f07565b5b8160010160009054906101000a900460ff166003811115610ac957610ac8610f07565b5b14610b09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0090611511565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b6e57818160020181905550610c02565b8273ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160315610c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf89061157d565b60405180910390fd5b5b50505050565b60025481565b610c16610c91565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7c9061160f565b60405180910390fd5b610c8e81610d0f565b50565b610c99610df7565b73ffffffffffffffffffffffffffffffffffffffff16610cb761080d565b73ffffffffffffffffffffffffffffffffffffffff1614610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061167b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600033905090565b6040518060e001604052806000815260200160006003811115610e2557610e24610f07565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b610ea881610e95565b8114610eb357600080fd5b50565b600081359050610ec581610e9f565b92915050565b600060208284031215610ee157610ee0610e90565b5b6000610eef84828501610eb6565b91505092915050565b610f0181610e95565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610f4757610f46610f07565b5b50565b6000819050610f5882610f36565b919050565b6000610f6882610f4a565b9050919050565b610f7881610f5d565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fa982610f7e565b9050919050565b610fb981610f9e565b82525050565b60e082016000820151610fd56000850182610ef8565b506020820151610fe86020850182610f6f565b506040820151610ffb6040850182610fb0565b50606082015161100e6060850182610ef8565b5060808201516110216080850182610fb0565b5060a082015161103460a0850182610ef8565b5060c082015161104760c0850182610fb0565b50505050565b600060e0820190506110626000830184610fbf565b92915050565b61107181610f9e565b811461107c57600080fd5b50565b60008135905061108e81611068565b92915050565b600080604083850312156110ab576110aa610e90565b5b60006110b985828601610eb6565b92505060206110ca8582860161107f565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60e0820160008201516111166000850182610ef8565b5060208201516111296020850182610f6f565b50604082015161113c6040850182610fb0565b50606082015161114f6060850182610ef8565b5060808201516111626080850182610fb0565b5060a082015161117560a0850182610ef8565b5060c082015161118860c0850182610fb0565b50505050565b600061119a8383611100565b60e08301905092915050565b6000602082019050919050565b60006111be826110d4565b6111c881856110df565b93506111d3836110f0565b8060005b838110156112045781516111eb888261118e565b97506111f6836111a6565b9250506001810190506111d7565b5085935050505092915050565b6000602082019050818103600083015261122b81846111b3565b905092915050565b61123c81610f9e565b82525050565b60006020820190506112576000830184611233565b92915050565b60006020828403121561127357611272610e90565b5b60006112818482850161107f565b91505092915050565b6000806000606084860312156112a3576112a2610e90565b5b60006112b186828701610eb6565b93505060206112c28682870161107f565b92505060406112d386828701610eb6565b9150509250925092565b6112e681610e95565b82525050565b600060208201905061130160008301846112dd565b92915050565b600082825260208201905092915050565b7f596f752063616e27742074616b65207468697320626574000000000000000000600082015250565b600061134e601783611307565b915061135982611318565b602082019050919050565b6000602082019050818103600083015261137d81611341565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141c82610e95565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361144e5761144d6113e2565b5b600182019050919050565b7f426574206c657373207468616e206d696e696d756d4265740000000000000000600082015250565b600061148f601883611307565b915061149a82611459565b602082019050919050565b600060208201905081810360008301526114be81611482565b9050919050565b7f42657420737461747573206e6f7420696e50726f677265737300000000000000600082015250565b60006114fb601983611307565b9150611506826114c5565b602082019050919050565b6000602082019050818103600083015261152a816114ee565b9050919050565b7f496e76616c696420706c61796572206164647265737300000000000000000000600082015250565b6000611567601683611307565b915061157282611531565b602082019050919050565b600060208201905081810360008301526115968161155a565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006115f9602683611307565b91506116048261159d565b604082019050919050565b60006020820190508181036000830152611628816115ec565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611665602083611307565b91506116708261162f565b602082019050919050565b6000602082019050818103600083015261169481611658565b905091905056fea2646970667358221220525e1b3ed3b6525ff2d818ec2664dc450f98ad8ff9e88461b8d239ea6a1b959a64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b14610126578063a4b47b1414610151578063a9d7a87e1461016d578063c38a8afd14610196578063f2fde38b146101c157610086565b8063061e494f1461008b57806360b73966146100c8578063715018a6146100e45780638020f324146100fb575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ecb565b6101ea565b6040516100bf919061104d565b60405180910390f35b6100e260048036038101906100dd9190611094565b610372565b005b3480156100f057600080fd5b506100f96105c8565b005b34801561010757600080fd5b506101106105dc565b60405161011d9190611211565b60405180910390f35b34801561013257600080fd5b5061013b61080d565b6040516101489190611242565b60405180910390f35b61016b6004803603810190610166919061125d565b610836565b005b34801561017957600080fd5b50610194600480360381019061018f919061128a565b610a72565b005b3480156101a257600080fd5b506101ab610c08565b6040516101b891906112ec565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e3919061125d565b610c0e565b005b6101f2610dff565b600460008381526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a900460ff16600381111561023f5761023e610f07565b5b600381111561025157610250610f07565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6000600460008481526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a900460ff1660038111156103c1576103c0610f07565b5b60038111156103d3576103d2610f07565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000600381111561050357610502610f07565b5b8160200151600381111561051a57610519610f07565b5b1461055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055190611364565b60405180910390fd5b60018160200190600381111561057357610572610f07565b5b9081600381111561058757610586610f07565b5b8152505081816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050505050565b6105d0610c91565b6105da6000610d0f565b565b60606000600380549050905060008167ffffffffffffffff81111561060457610603611384565b5b60405190808252806020026020018201604052801561063d57816020015b61062a610dff565b8152602001906001900390816106225790505b50905060005b82811015610804576003818154811061065f5761065e6113b3565b5b90600052602060002090600602016040518060e0016040529081600082015481526020016001820160009054906101000a900460ff1660038111156106a7576106a6610f07565b5b60038111156106b9576106b8610f07565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508282815181106107e6576107e56113b3565b5b602002602001018190525080806107fc90611411565b915050610643565b50809250505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600254341161087a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610871906114a5565b60405180910390fd5b6108846001610dd3565b60006040518060e0016040528061089b6001610de9565b8152602001600060038111156108b4576108b3610f07565b5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060038190806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548160ff0219169083600381111561097e5761097d610f07565b5b021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816002015560808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b610a7a610c91565b600060046000858152602001908152602001600020905060016003811115610aa557610aa4610f07565b5b8160010160009054906101000a900460ff166003811115610ac957610ac8610f07565b5b14610b09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0090611511565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b6e57818160020181905550610c02565b8273ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160315610c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf89061157d565b60405180910390fd5b5b50505050565b60025481565b610c16610c91565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7c9061160f565b60405180910390fd5b610c8e81610d0f565b50565b610c99610df7565b73ffffffffffffffffffffffffffffffffffffffff16610cb761080d565b73ffffffffffffffffffffffffffffffffffffffff1614610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061167b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600033905090565b6040518060e001604052806000815260200160006003811115610e2557610e24610f07565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b610ea881610e95565b8114610eb357600080fd5b50565b600081359050610ec581610e9f565b92915050565b600060208284031215610ee157610ee0610e90565b5b6000610eef84828501610eb6565b91505092915050565b610f0181610e95565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610f4757610f46610f07565b5b50565b6000819050610f5882610f36565b919050565b6000610f6882610f4a565b9050919050565b610f7881610f5d565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fa982610f7e565b9050919050565b610fb981610f9e565b82525050565b60e082016000820151610fd56000850182610ef8565b506020820151610fe86020850182610f6f565b506040820151610ffb6040850182610fb0565b50606082015161100e6060850182610ef8565b5060808201516110216080850182610fb0565b5060a082015161103460a0850182610ef8565b5060c082015161104760c0850182610fb0565b50505050565b600060e0820190506110626000830184610fbf565b92915050565b61107181610f9e565b811461107c57600080fd5b50565b60008135905061108e81611068565b92915050565b600080604083850312156110ab576110aa610e90565b5b60006110b985828601610eb6565b92505060206110ca8582860161107f565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60e0820160008201516111166000850182610ef8565b5060208201516111296020850182610f6f565b50604082015161113c6040850182610fb0565b50606082015161114f6060850182610ef8565b5060808201516111626080850182610fb0565b5060a082015161117560a0850182610ef8565b5060c082015161118860c0850182610fb0565b50505050565b600061119a8383611100565b60e08301905092915050565b6000602082019050919050565b60006111be826110d4565b6111c881856110df565b93506111d3836110f0565b8060005b838110156112045781516111eb888261118e565b97506111f6836111a6565b9250506001810190506111d7565b5085935050505092915050565b6000602082019050818103600083015261122b81846111b3565b905092915050565b61123c81610f9e565b82525050565b60006020820190506112576000830184611233565b92915050565b60006020828403121561127357611272610e90565b5b60006112818482850161107f565b91505092915050565b6000806000606084860312156112a3576112a2610e90565b5b60006112b186828701610eb6565b93505060206112c28682870161107f565b92505060406112d386828701610eb6565b9150509250925092565b6112e681610e95565b82525050565b600060208201905061130160008301846112dd565b92915050565b600082825260208201905092915050565b7f596f752063616e27742074616b65207468697320626574000000000000000000600082015250565b600061134e601783611307565b915061135982611318565b602082019050919050565b6000602082019050818103600083015261137d81611341565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141c82610e95565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361144e5761144d6113e2565b5b600182019050919050565b7f426574206c657373207468616e206d696e696d756d4265740000000000000000600082015250565b600061148f601883611307565b915061149a82611459565b602082019050919050565b600060208201905081810360008301526114be81611482565b9050919050565b7f42657420737461747573206e6f7420696e50726f677265737300000000000000600082015250565b60006114fb601983611307565b9150611506826114c5565b602082019050919050565b6000602082019050818103600083015261152a816114ee565b9050919050565b7f496e76616c696420706c61796572206164647265737300000000000000000000600082015250565b6000611567601683611307565b915061157282611531565b602082019050919050565b600060208201905081810360008301526115968161155a565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006115f9602683611307565b91506116048261159d565b604082019050919050565b60006020820190508181036000830152611628816115ec565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611665602083611307565b91506116708261162f565b602082019050919050565b6000602082019050818103600083015261169481611658565b905091905056fea2646970667358221220525e1b3ed3b6525ff2d818ec2664dc450f98ad8ff9e88461b8d239ea6a1b959a64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 223,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "_id",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)140_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "minimumBet",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 230,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "pendingBets",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Bet)256_storage)dyn_storage"
      },
      {
        "astId": 235,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "id2Bet",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Bet)256_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bet)256_storage)dyn_storage": {
        "base": "t_struct(Bet)256_storage",
        "encoding": "dynamic_array",
        "label": "struct BetContract.Bet[]",
        "numberOfBytes": "32"
      },
      "t_enum(BetStatus)240": {
        "encoding": "inplace",
        "label": "enum BetContract.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Bet)256_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BetContract.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)256_storage"
      },
      "t_struct(Bet)256_storage": {
        "encoding": "inplace",
        "label": "struct BetContract.Bet",
        "members": [
          {
            "astId": 242,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 245,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(BetStatus)240"
          },
          {
            "astId": 247,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "player1",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 249,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "scorePlayer1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 251,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "player2",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 253,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "scorePlayer2",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 255,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "winner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Counter)140_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 139,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}