{
  "address": "0x2F40e1970165b482f2B754D641b6BC5A2BbA60a1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "name": "BetCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BetTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        }
      ],
      "name": "createBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum BetContract.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer2",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BetContract.Bet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "enum BetContract.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scorePlayer2",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BetContract.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player2",
          "type": "address"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_score",
          "type": "uint256"
        }
      ],
      "name": "updateScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa020bca158110684c43719d8b056809bf21e99e7ee7feb09eb522ee65448f3fd",
  "receipt": {
    "to": null,
    "from": "0x5E7a023dFBeeeBCb6E2B57fb3462E2FbCcf39E95",
    "contractAddress": "0x2F40e1970165b482f2B754D641b6BC5A2BbA60a1",
    "transactionIndex": 97,
    "gasUsed": "1861895",
    "logsBloom": "0x
    "blockHash": "0x97d8a47e7f7358a3222a86946c2e477fa506e8f9f50ed1f4a79e5838bd17932c",
    "transactionHash": "0xa020bca158110684c43719d8b056809bf21e99e7ee7feb09eb522ee65448f3fd",
    "logs": [
      {
        "transactionIndex": 97,
        "blockNumber": 4056829,
        "transactionHash": "0xa020bca158110684c43719d8b056809bf21e99e7ee7feb09eb522ee65448f3fd",
        "address": "0x2F40e1970165b482f2B754D641b6BC5A2BbA60a1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005e7a023dfbeeebcb6e2b57fb3462e2fbccf39e95"
        ],
        "data": "0x",
        "logIndex": 96,
        "blockHash": "0x97d8a47e7f7358a3222a86946c2e477fa506e8f9f50ed1f4a79e5838bd17932c"
      }
    ],
    "blockNumber": 4056829,
    "cumulativeGasUsed": "11864889",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5cec75d1256f03d6b89fd4ed1ac99f29",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"BetCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"}],\"name\":\"createBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum BetContract.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BetContract.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum BetContract.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scorePlayer2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BetContract.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player2\",\"type\":\"address\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"}],\"name\":\"updateScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bet.sol\":\"BetContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Bet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror BetContract_LessThanMinimumBet();\\n\\ncontract BetContract is Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _id;\\n    uint256 public minimumBet = 0.001 ether;\\n    uint256 private protocolEarnings;\\n    mapping(uint256 => Bet) id2Bet;\\n\\n    enum BetStatus {\\n        Created,\\n        InProgress,\\n        Completed,\\n        Failed\\n    }\\n\\n    struct Bet {\\n        uint256 id;\\n        BetStatus status;\\n        address player1;\\n        uint256 scorePlayer1;\\n        address player2;\\n        uint256 scorePlayer2;\\n        address winner;\\n        uint256 betAmount;\\n    }\\n\\n    event BetCreated(uint256 id, address indexed player1, uint256 amount);\\n    event BetTaken(uint256 id, address indexed player2, uint256 amount);\\n    event BetCompleted(\\n        uint256 id,\\n        address indexed player1,\\n        address indexed player2,\\n        uint256 betAmount\\n    );\\n    event BetFailed(uint256 id, address indexed player1, uint256 amount);\\n\\n    function createBet(address player1) public payable {\\n        require(msg.value >= minimumBet, \\\"Bet less than minimumBet\\\");\\n        _id.increment();\\n        Bet memory newBet = Bet(\\n            _id.current(),\\n            BetStatus.Created,\\n            player1,\\n            0,\\n            address(0),\\n            0,\\n            address(0),\\n            msg.value\\n        );\\n        id2Bet[_id.current()] = newBet;\\n        emit BetCreated(_id.current(), player1, msg.value);\\n    }\\n\\n    function takeBet(uint256 _betId, address _player2) public payable {\\n        Bet storage bet = id2Bet[_betId];\\n        require(bet.status == BetStatus.Created, \\\"You can't take this bet\\\");\\n        require(bet.betAmount == msg.value, \\\"Bet amount not matched\\\");\\n        bet.status = BetStatus.InProgress;\\n        bet.player2 = _player2;\\n        id2Bet[_betId] = bet;\\n        emit BetTaken(_betId, _player2, msg.value);\\n    }\\n\\n    function updateScore(\\n        uint256 _betId,\\n        address _player,\\n        uint256 _score\\n    ) public onlyOwner {\\n        Bet storage updatedBet = id2Bet[_betId];\\n        require(\\n            updatedBet.status == BetStatus.InProgress ||\\n                updatedBet.status == BetStatus.Created,\\n            \\\"Bet status not Created or inProgress\\\"\\n        );\\n        if (updatedBet.player1 == _player) {\\n            updatedBet.scorePlayer1 = _score;\\n        } else if (updatedBet.player2 == _player) {\\n            updatedBet.scorePlayer2 = _score;\\n        } else {\\n            revert(\\\"Invalid player address\\\");\\n        }\\n\\n        declareWinner(updatedBet);\\n    }\\n\\n    function declareWinner(Bet memory bet) private {\\n        if (bet.scorePlayer1 > 0 && bet.scorePlayer2 > 0) {\\n            // Determine the winner based on scores\\n            address winner = bet.scorePlayer1 > bet.scorePlayer2\\n                ? bet.player1\\n                : bet.player2;\\n            id2Bet[bet.id].winner = winner;\\n            //id2Bet[bet.id].status = BetStatus.Completed;\\n\\n            //calculate amount of reward for winner\\n            uint256 winnerReward = ((bet.betAmount * 2) * 80) / 100;\\n            uint protocolFee = (bet.betAmount * 2) - winnerReward;\\n            protocolEarnings += protocolFee;\\n\\n            //transfer funds to the winner\\n            (bool sent, bytes memory data) = payable(winner).call{\\n                value: winnerReward\\n            }(\\\"\\\");\\n\\n            emit BetCompleted(bet.id, bet.player1, bet.player2, bet.betAmount);\\n        }\\n    }\\n\\n    //Getters//\\n\\n    function getPendingBets() public view returns (Bet[] memory) {\\n        uint256 allBetsNumber = _id.current();\\n        uint256 pendingBetsNumber = 0;\\n\\n        for (uint i = 1; i <= allBetsNumber; i++) {\\n            if (\\n                id2Bet[i].status == BetStatus.Created ||\\n                id2Bet[i].status == BetStatus.InProgress\\n            ) {\\n                pendingBetsNumber++;\\n            }\\n        }\\n\\n        Bet[] memory pendingBetsArr = new Bet[](pendingBetsNumber);\\n        uint256 pendingBetArrLocation = 0;\\n        for (uint256 i = 1; i <= pendingBetsNumber; i++) {\\n            if (\\n                id2Bet[i].status == BetStatus.Created ||\\n                id2Bet[i].status == BetStatus.InProgress\\n            ) {\\n                pendingBetsArr[pendingBetArrLocation] = id2Bet[i];\\n                pendingBetArrLocation++;\\n            }\\n        }\\n        return pendingBetsArr;\\n    }\\n\\n    function getBet(uint256 id) public view returns (Bet memory) {\\n        return id2Bet[id];\\n    }\\n\\n    function getProtocolEarnings() public view returns (uint256) {\\n        return protocolEarnings;\\n    }\\n}\\n\",\"keccak256\":\"0xfda6e45345af82fe672908eb4058bd5e3a4d6eb1c023df76e67180717e93d286\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c6800060025534801561001b57600080fd5b5061003861002d61003d60201b60201c565b61004560201b60201c565b610109565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611fea806101186000396000f3fe6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b1461015c578063a4b47b1414610187578063a9d7a87e146101a3578063c38a8afd146101cc578063f2fde38b146101f757610091565b8063061e494f1461009657806360b73966146100d3578063692451a3146100ef578063715018a61461011a5780638020f32414610131575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b891906115af565b610220565b6040516100ca9190611745565b60405180910390f35b6100ed60048036038101906100e8919061178d565b6103b3565b005b3480156100fb57600080fd5b506101046106fe565b60405161011191906117dc565b60405180910390f35b34801561012657600080fd5b5061012f610708565b005b34801561013d57600080fd5b5061014661071c565b6040516101539190611949565b60405180910390f35b34801561016857600080fd5b50610171610ad8565b60405161017e919061197a565b60405180910390f35b6101a1600480360381019061019c9190611995565b610b01565b005b3480156101af57600080fd5b506101ca60048036038101906101c591906119c2565b610d9a565b005b3480156101d857600080fd5b506101e16110f7565b6040516101ee91906117dc565b60405180910390f35b34801561020357600080fd5b5061021e60048036038101906102199190611995565b6110fd565b005b6102286114db565b6004600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff166003811115610276576102756115eb565b5b6003811115610288576102876115eb565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815250509050919050565b6000600460008481526020019081526020016000209050600060038111156103de576103dd6115eb565b5b8160010160009054906101000a900460ff166003811115610402576104016115eb565b5b14610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043990611a72565b60405180910390fd5b34816006015414610488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047f90611ade565b60405180910390fd5b60018160010160006101000a81548160ff021916908360038111156104b0576104af6115eb565b5b0217905550818160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060046000858152602001908152602001600020600082015481600001556001820160009054906101000a900460ff168160010160006101000a81548160ff0219169083600381111561054e5761054d6115eb565b5b02179055506001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600482015481600401556005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600682015481600601559050508173ffffffffffffffffffffffffffffffffffffffff167f0a64f4fc6b0a0429f039098ded0a24e0012146757aa00c7362126647ae4bca9384346040516106f1929190611afe565b60405180910390a2505050565b6000600354905090565b610710611180565b61071a60006111fe565b565b6060600061072a60016112c2565b9050600080600190505b8281116107ff576000600381111561074f5761074e6115eb565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff166003811115610785576107846115eb565b5b14806107d85750600160038111156107a05761079f6115eb565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff1660038111156107d6576107d56115eb565b5b145b156107ec5781806107e890611b56565b9250505b80806107f790611b56565b915050610734565b5060008167ffffffffffffffff81111561081c5761081b611b9e565b5b60405190808252806020026020018201604052801561085557816020015b6108426114db565b81526020019060019003908161083a5790505b509050600080600190505b838111610acd576000600381111561087b5761087a6115eb565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff1660038111156108b1576108b06115eb565b5b14806109045750600160038111156108cc576108cb6115eb565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff166003811115610902576109016115eb565b5b145b15610aba576004600082815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff166003811115610957576109566115eb565b5b6003811115610969576109686115eb565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481525050838381518110610aa057610a9f611bcd565b5b60200260200101819052508180610ab690611b56565b9250505b8080610ac590611b56565b915050610860565b508194505050505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600254341015610b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3d90611c48565b60405180910390fd5b610b5060016112d0565b6000604051806101000160405280610b6860016112c2565b815260200160006003811115610b8157610b806115eb565b5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013481525090508060046000610bff60016112c2565b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690836003811115610c4257610c416115eb565b5b021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816002015560808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600601559050508173ffffffffffffffffffffffffffffffffffffffff167f5d51034605fe51fe0de6338bcab547034242e3f1b36e80aec6af07ebda031ded610d7f60016112c2565b34604051610d8e929190611afe565b60405180910390a25050565b610da2611180565b600060046000858152602001908152602001600020905060016003811115610dcd57610dcc6115eb565b5b8160010160009054906101000a900460ff166003811115610df157610df06115eb565b5b1480610e32575060006003811115610e0c57610e0b6115eb565b5b8160010160009054906101000a900460ff166003811115610e3057610e2f6115eb565b5b145b610e71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6890611cda565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ed657818160020181905550610f77565b8273ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f3b57818160040181905550610f76565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6d90611d46565b60405180910390fd5b5b6110f18160405180610100016040529081600082015481526020016001820160009054906101000a900460ff166003811115610fb657610fb56115eb565b5b6003811115610fc857610fc76115eb565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815250506112e6565b50505050565b60025481565b611105611180565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116b90611dd8565b60405180910390fd5b61117d816111fe565b50565b6111886114d3565b73ffffffffffffffffffffffffffffffffffffffff166111a6610ad8565b73ffffffffffffffffffffffffffffffffffffffff16146111fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f390611e44565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600081606001511180156112fe575060008160a00151115b156114d05760008160a0015182606001511161131e578160800151611324565b81604001515b905080600460008460000151815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006064605060028560e001516113969190611e64565b6113a09190611e64565b6113aa9190611ed5565b905060008160028560e001516113c09190611e64565b6113ca9190611f06565b905080600360008282546113de9190611f3a565b925050819055506000808473ffffffffffffffffffffffffffffffffffffffff168460405161140c90611f9f565b60006040518083038185875af1925050503d8060008114611449576040519150601f19603f3d011682016040523d82523d6000602084013e61144e565b606091505b5091509150856080015173ffffffffffffffffffffffffffffffffffffffff16866040015173ffffffffffffffffffffffffffffffffffffffff167fbd0ecc7334be5852eb8be13405182000a8d3f3e011504f04dbdcb113407583ea88600001518960e001516040516114c2929190611afe565b60405180910390a350505050505b50565b600033905090565b6040518061010001604052806000815260200160006003811115611502576115016115eb565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b6000819050919050565b61158c81611579565b811461159757600080fd5b50565b6000813590506115a981611583565b92915050565b6000602082840312156115c5576115c4611574565b5b60006115d38482850161159a565b91505092915050565b6115e581611579565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061162b5761162a6115eb565b5b50565b600081905061163c8261161a565b919050565b600061164c8261162e565b9050919050565b61165c81611641565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061168d82611662565b9050919050565b61169d81611682565b82525050565b610100820160008201516116ba60008501826115dc565b5060208201516116cd6020850182611653565b5060408201516116e06040850182611694565b5060608201516116f360608501826115dc565b5060808201516117066080850182611694565b5060a082015161171960a08501826115dc565b5060c082015161172c60c0850182611694565b5060e082015161173f60e08501826115dc565b50505050565b60006101008201905061175b60008301846116a3565b92915050565b61176a81611682565b811461177557600080fd5b50565b60008135905061178781611761565b92915050565b600080604083850312156117a4576117a3611574565b5b60006117b28582860161159a565b92505060206117c385828601611778565b9150509250929050565b6117d681611579565b82525050565b60006020820190506117f160008301846117cd565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6101008201600082015161183a60008501826115dc565b50602082015161184d6020850182611653565b5060408201516118606040850182611694565b50606082015161187360608501826115dc565b5060808201516118866080850182611694565b5060a082015161189960a08501826115dc565b5060c08201516118ac60c0850182611694565b5060e08201516118bf60e08501826115dc565b50505050565b60006118d18383611823565b6101008301905092915050565b6000602082019050919050565b60006118f6826117f7565b6119008185611802565b935061190b83611813565b8060005b8381101561193c57815161192388826118c5565b975061192e836118de565b92505060018101905061190f565b5085935050505092915050565b6000602082019050818103600083015261196381846118eb565b905092915050565b61197481611682565b82525050565b600060208201905061198f600083018461196b565b92915050565b6000602082840312156119ab576119aa611574565b5b60006119b984828501611778565b91505092915050565b6000806000606084860312156119db576119da611574565b5b60006119e98682870161159a565b93505060206119fa86828701611778565b9250506040611a0b8682870161159a565b9150509250925092565b600082825260208201905092915050565b7f596f752063616e27742074616b65207468697320626574000000000000000000600082015250565b6000611a5c601783611a15565b9150611a6782611a26565b602082019050919050565b60006020820190508181036000830152611a8b81611a4f565b9050919050565b7f42657420616d6f756e74206e6f74206d61746368656400000000000000000000600082015250565b6000611ac8601683611a15565b9150611ad382611a92565b602082019050919050565b60006020820190508181036000830152611af781611abb565b9050919050565b6000604082019050611b1360008301856117cd565b611b2060208301846117cd565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b6182611579565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b9357611b92611b27565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f426574206c657373207468616e206d696e696d756d4265740000000000000000600082015250565b6000611c32601883611a15565b9150611c3d82611bfc565b602082019050919050565b60006020820190508181036000830152611c6181611c25565b9050919050565b7f42657420737461747573206e6f742043726561746564206f7220696e50726f6760008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611cc4602483611a15565b9150611ccf82611c68565b604082019050919050565b60006020820190508181036000830152611cf381611cb7565b9050919050565b7f496e76616c696420706c61796572206164647265737300000000000000000000600082015250565b6000611d30601683611a15565b9150611d3b82611cfa565b602082019050919050565b60006020820190508181036000830152611d5f81611d23565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611dc2602683611a15565b9150611dcd82611d66565b604082019050919050565b60006020820190508181036000830152611df181611db5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e2e602083611a15565b9150611e3982611df8565b602082019050919050565b60006020820190508181036000830152611e5d81611e21565b9050919050565b6000611e6f82611579565b9150611e7a83611579565b9250828202611e8881611579565b91508282048414831517611e9f57611e9e611b27565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611ee082611579565b9150611eeb83611579565b925082611efb57611efa611ea6565b5b828204905092915050565b6000611f1182611579565b9150611f1c83611579565b9250828203905081811115611f3457611f33611b27565b5b92915050565b6000611f4582611579565b9150611f5083611579565b9250828201905080821115611f6857611f67611b27565b5b92915050565b600081905092915050565b50565b6000611f89600083611f6e565b9150611f9482611f79565b600082019050919050565b6000611faa82611f7c565b915081905091905056fea26469706673582212202989d45b969018afeffa36efb7bc90de880520487b50b1db5a64d53f173a53b564736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b1461015c578063a4b47b1414610187578063a9d7a87e146101a3578063c38a8afd146101cc578063f2fde38b146101f757610091565b8063061e494f1461009657806360b73966146100d3578063692451a3146100ef578063715018a61461011a5780638020f32414610131575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b891906115af565b610220565b6040516100ca9190611745565b60405180910390f35b6100ed60048036038101906100e8919061178d565b6103b3565b005b3480156100fb57600080fd5b506101046106fe565b60405161011191906117dc565b60405180910390f35b34801561012657600080fd5b5061012f610708565b005b34801561013d57600080fd5b5061014661071c565b6040516101539190611949565b60405180910390f35b34801561016857600080fd5b50610171610ad8565b60405161017e919061197a565b60405180910390f35b6101a1600480360381019061019c9190611995565b610b01565b005b3480156101af57600080fd5b506101ca60048036038101906101c591906119c2565b610d9a565b005b3480156101d857600080fd5b506101e16110f7565b6040516101ee91906117dc565b60405180910390f35b34801561020357600080fd5b5061021e60048036038101906102199190611995565b6110fd565b005b6102286114db565b6004600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff166003811115610276576102756115eb565b5b6003811115610288576102876115eb565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815250509050919050565b6000600460008481526020019081526020016000209050600060038111156103de576103dd6115eb565b5b8160010160009054906101000a900460ff166003811115610402576104016115eb565b5b14610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043990611a72565b60405180910390fd5b34816006015414610488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047f90611ade565b60405180910390fd5b60018160010160006101000a81548160ff021916908360038111156104b0576104af6115eb565b5b0217905550818160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060046000858152602001908152602001600020600082015481600001556001820160009054906101000a900460ff168160010160006101000a81548160ff0219169083600381111561054e5761054d6115eb565b5b02179055506001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600482015481600401556005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600682015481600601559050508173ffffffffffffffffffffffffffffffffffffffff167f0a64f4fc6b0a0429f039098ded0a24e0012146757aa00c7362126647ae4bca9384346040516106f1929190611afe565b60405180910390a2505050565b6000600354905090565b610710611180565b61071a60006111fe565b565b6060600061072a60016112c2565b9050600080600190505b8281116107ff576000600381111561074f5761074e6115eb565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff166003811115610785576107846115eb565b5b14806107d85750600160038111156107a05761079f6115eb565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff1660038111156107d6576107d56115eb565b5b145b156107ec5781806107e890611b56565b9250505b80806107f790611b56565b915050610734565b5060008167ffffffffffffffff81111561081c5761081b611b9e565b5b60405190808252806020026020018201604052801561085557816020015b6108426114db565b81526020019060019003908161083a5790505b509050600080600190505b838111610acd576000600381111561087b5761087a6115eb565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff1660038111156108b1576108b06115eb565b5b14806109045750600160038111156108cc576108cb6115eb565b5b6004600083815260200190815260200160002060010160009054906101000a900460ff166003811115610902576109016115eb565b5b145b15610aba576004600082815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900460ff166003811115610957576109566115eb565b5b6003811115610969576109686115eb565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481525050838381518110610aa057610a9f611bcd565b5b60200260200101819052508180610ab690611b56565b9250505b8080610ac590611b56565b915050610860565b508194505050505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600254341015610b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3d90611c48565b60405180910390fd5b610b5060016112d0565b6000604051806101000160405280610b6860016112c2565b815260200160006003811115610b8157610b806115eb565b5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013481525090508060046000610bff60016112c2565b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690836003811115610c4257610c416115eb565b5b021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816002015560808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816004015560c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600601559050508173ffffffffffffffffffffffffffffffffffffffff167f5d51034605fe51fe0de6338bcab547034242e3f1b36e80aec6af07ebda031ded610d7f60016112c2565b34604051610d8e929190611afe565b60405180910390a25050565b610da2611180565b600060046000858152602001908152602001600020905060016003811115610dcd57610dcc6115eb565b5b8160010160009054906101000a900460ff166003811115610df157610df06115eb565b5b1480610e32575060006003811115610e0c57610e0b6115eb565b5b8160010160009054906101000a900460ff166003811115610e3057610e2f6115eb565b5b145b610e71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6890611cda565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ed657818160020181905550610f77565b8273ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f3b57818160040181905550610f76565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6d90611d46565b60405180910390fd5b5b6110f18160405180610100016040529081600082015481526020016001820160009054906101000a900460ff166003811115610fb657610fb56115eb565b5b6003811115610fc857610fc76115eb565b5b81526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815250506112e6565b50505050565b60025481565b611105611180565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116b90611dd8565b60405180910390fd5b61117d816111fe565b50565b6111886114d3565b73ffffffffffffffffffffffffffffffffffffffff166111a6610ad8565b73ffffffffffffffffffffffffffffffffffffffff16146111fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f390611e44565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600081606001511180156112fe575060008160a00151115b156114d05760008160a0015182606001511161131e578160800151611324565b81604001515b905080600460008460000151815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006064605060028560e001516113969190611e64565b6113a09190611e64565b6113aa9190611ed5565b905060008160028560e001516113c09190611e64565b6113ca9190611f06565b905080600360008282546113de9190611f3a565b925050819055506000808473ffffffffffffffffffffffffffffffffffffffff168460405161140c90611f9f565b60006040518083038185875af1925050503d8060008114611449576040519150601f19603f3d011682016040523d82523d6000602084013e61144e565b606091505b5091509150856080015173ffffffffffffffffffffffffffffffffffffffff16866040015173ffffffffffffffffffffffffffffffffffffffff167fbd0ecc7334be5852eb8be13405182000a8d3f3e011504f04dbdcb113407583ea88600001518960e001516040516114c2929190611afe565b60405180910390a350505050505b50565b600033905090565b6040518061010001604052806000815260200160006003811115611502576115016115eb565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b6000819050919050565b61158c81611579565b811461159757600080fd5b50565b6000813590506115a981611583565b92915050565b6000602082840312156115c5576115c4611574565b5b60006115d38482850161159a565b91505092915050565b6115e581611579565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061162b5761162a6115eb565b5b50565b600081905061163c8261161a565b919050565b600061164c8261162e565b9050919050565b61165c81611641565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061168d82611662565b9050919050565b61169d81611682565b82525050565b610100820160008201516116ba60008501826115dc565b5060208201516116cd6020850182611653565b5060408201516116e06040850182611694565b5060608201516116f360608501826115dc565b5060808201516117066080850182611694565b5060a082015161171960a08501826115dc565b5060c082015161172c60c0850182611694565b5060e082015161173f60e08501826115dc565b50505050565b60006101008201905061175b60008301846116a3565b92915050565b61176a81611682565b811461177557600080fd5b50565b60008135905061178781611761565b92915050565b600080604083850312156117a4576117a3611574565b5b60006117b28582860161159a565b92505060206117c385828601611778565b9150509250929050565b6117d681611579565b82525050565b60006020820190506117f160008301846117cd565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6101008201600082015161183a60008501826115dc565b50602082015161184d6020850182611653565b5060408201516118606040850182611694565b50606082015161187360608501826115dc565b5060808201516118866080850182611694565b5060a082015161189960a08501826115dc565b5060c08201516118ac60c0850182611694565b5060e08201516118bf60e08501826115dc565b50505050565b60006118d18383611823565b6101008301905092915050565b6000602082019050919050565b60006118f6826117f7565b6119008185611802565b935061190b83611813565b8060005b8381101561193c57815161192388826118c5565b975061192e836118de565b92505060018101905061190f565b5085935050505092915050565b6000602082019050818103600083015261196381846118eb565b905092915050565b61197481611682565b82525050565b600060208201905061198f600083018461196b565b92915050565b6000602082840312156119ab576119aa611574565b5b60006119b984828501611778565b91505092915050565b6000806000606084860312156119db576119da611574565b5b60006119e98682870161159a565b93505060206119fa86828701611778565b9250506040611a0b8682870161159a565b9150509250925092565b600082825260208201905092915050565b7f596f752063616e27742074616b65207468697320626574000000000000000000600082015250565b6000611a5c601783611a15565b9150611a6782611a26565b602082019050919050565b60006020820190508181036000830152611a8b81611a4f565b9050919050565b7f42657420616d6f756e74206e6f74206d61746368656400000000000000000000600082015250565b6000611ac8601683611a15565b9150611ad382611a92565b602082019050919050565b60006020820190508181036000830152611af781611abb565b9050919050565b6000604082019050611b1360008301856117cd565b611b2060208301846117cd565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b6182611579565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b9357611b92611b27565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f426574206c657373207468616e206d696e696d756d4265740000000000000000600082015250565b6000611c32601883611a15565b9150611c3d82611bfc565b602082019050919050565b60006020820190508181036000830152611c6181611c25565b9050919050565b7f42657420737461747573206e6f742043726561746564206f7220696e50726f6760008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611cc4602483611a15565b9150611ccf82611c68565b604082019050919050565b60006020820190508181036000830152611cf381611cb7565b9050919050565b7f496e76616c696420706c61796572206164647265737300000000000000000000600082015250565b6000611d30601683611a15565b9150611d3b82611cfa565b602082019050919050565b60006020820190508181036000830152611d5f81611d23565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611dc2602683611a15565b9150611dcd82611d66565b604082019050919050565b60006020820190508181036000830152611df181611db5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e2e602083611a15565b9150611e3982611df8565b602082019050919050565b60006020820190508181036000830152611e5d81611e21565b9050919050565b6000611e6f82611579565b9150611e7a83611579565b9250828202611e8881611579565b91508282048414831517611e9f57611e9e611b27565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611ee082611579565b9150611eeb83611579565b925082611efb57611efa611ea6565b5b828204905092915050565b6000611f1182611579565b9150611f1c83611579565b9250828203905081811115611f3457611f33611b27565b5b92915050565b6000611f4582611579565b9150611f5083611579565b9250828201905080821115611f6857611f67611b27565b5b92915050565b600081905092915050565b50565b6000611f89600083611f6e565b9150611f9482611f79565b600082019050919050565b6000611faa82611f7c565b915081905091905056fea26469706673582212202989d45b969018afeffa36efb7bc90de880520487b50b1db5a64d53f173a53b564736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 223,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "_id",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)140_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "minimumBet",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 228,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "protocolEarnings",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 233,
        "contract": "contracts/Bet.sol:BetContract",
        "label": "id2Bet",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Bet)256_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(BetStatus)238": {
        "encoding": "inplace",
        "label": "enum BetContract.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Bet)256_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BetContract.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)256_storage"
      },
      "t_struct(Bet)256_storage": {
        "encoding": "inplace",
        "label": "struct BetContract.Bet",
        "members": [
          {
            "astId": 240,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 243,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(BetStatus)238"
          },
          {
            "astId": 245,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "player1",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 247,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "scorePlayer1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 249,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "player2",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 251,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "scorePlayer2",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 253,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "winner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 255,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "betAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Counter)140_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 139,
            "contract": "contracts/Bet.sol:BetContract",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}